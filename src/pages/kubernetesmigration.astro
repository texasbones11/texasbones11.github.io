---
// Infrastructure Modernization Case Study
// Documents a zero-downtime Kubernetes migration project
import Casestudy from "../components/Casestudy.astro";
import Layout from "../layouts/Layout.astro";
import Footer from "../components/Footer.astro";
import Casepic from "../assets/rancher-to-kubernetes.webp";

/**
 * Case Study Content - Infrastructure Migration
 * Structured to highlight:
 * - Legacy system challenges
 * - Modernization approach
 * - Measurable outcomes
 */

// Hero Section - Project Overview
const name = "Mission-Critical Infrastructure Modernization";
const tagline = `From Technical Debt to Reliable Foundations in 90 Days`;
const description = `When your IoT platform processes millions of sensor datapoints daily, infrastructure reliability isn't optional - 
it's the core of customer trust. This case study shows how I led a zero-downtime migration that future-proofed our platform.`;

// Challenge Section - Legacy System Pain Points
const challenge = `The Challenge: Impending EOL and Operational Fragility`;
const challengepart1 = `Rancher platform approaching end-of-life with no clear upgrade path`;
const challengepart2 = `Manual deployment processes causing inconsistent environments and deployment bottlenecks`;
const challengepart3 = `Certificate management and other critical functions handled through error-prone manual processes`;

// Solution Section - Technical Implementation
const solution = `The Solution: Strategic Kubernetes Modernization`;
const solutionpart1 = `Successfully moved our entire infrastructure from Rancher to Amazon EKS without any downtime - 
completing the cutover in one carefully planned evening. Introduced codified infrastructure templates (Helm charts) 
that made deployments 30% more reliable while allowing easy rollbacks. This wasn't just a migration - we built a 
system designed to automatically handle future upgrades and expansions.`;

const solutionpart2 = `Eliminated entire categories of nighttime alerts by automating certificate renewals, 
server scaling, and other repetitive tasks. Created standardized deployment processes that reduced configuration 
errors and gave developers self-service tools (cutting ops requests by 50%). The best part? Every new 
automation built on this foundation delivered compounding returns - we saw alert volume drop and kept 
improving from there.`;
---

<!-- 
  Page Composition
  Uses Layout for consistent page structure
  CaseStudy component renders all content sections
  Footer provides consistent site closure
-->
<Layout>
  <Casestudy
    casepicUrl={Casepic}
    name={name}
    tagline={tagline}
    description={description}
    challenge={challenge}
    solution={solution}
    challengepart1={challengepart1}
    solutionpart1={solutionpart1}
    challengepart2={challengepart2}
    solutionpart2={solutionpart2}
    challengepart3={challengepart3}
  />
</Layout>
<Footer />
